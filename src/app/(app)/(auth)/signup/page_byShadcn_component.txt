'use client';
import Image from 'next/image';
import Link from 'next/link';
import React, { useState } from 'react';
import { IoEye } from "react-icons/io5";
import { IoEyeOff } from "react-icons/io5";
import { MdOutlineRefresh } from "react-icons/md";
import { Form, FormProvider, useForm } from 'react-hook-form'
import { UserModel } from '@/schema/UserModel';
import { z } from 'zod'
import { zodResolver } from "@hookform/resolvers/zod"
import { Button } from '@/components/ui/button';
import { FormField, FormItem, FormLabel, FormControl, FormDescription, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';
import { cn } from '@/lib/utils';
import { CalendarIcon, ChevronDown } from 'lucide-react';
import { format } from 'date-fns';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Textarea } from '@/components/ui/textarea';



export default function SignupPage() {
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirm, setShowConfirm] = useState(false);
    const [captcha, setCaptcha] = useState('');

    // Generate a random 5-character captcha
    const generateCaptcha = () => {
        const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
        let code = '';
        for (let i = 0; i < 5; i++) {
            code += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        setCaptcha(code);
    };

    const form = useForm<z.infer<typeof UserModel>>({
        resolver: zodResolver(UserModel),
        defaultValues: {
            name: '',
            email: '',
            password: '',
            gender: undefined,
            confirmPassword: '',
            dob: undefined,
            phoneNumber: '',
            address: '',
            bio: '',
            avatarMedia: undefined,
        },
    })

    // Generate captcha on mount
    React.useEffect(() => {
        generateCaptcha();
    }, []);

    // {const [form,setForm] = useState(useForm<z.infer<typeof UserModel>>({
    //     resolver: zodResolver(UserModel),
    //     defaultValues: {
    //         name: '',
    //         email: '',
    //         password: '',
    //         gender: 'Male',
    //         confirmPassword: '',
    //         dob: undefined,
    //         phoneNumber: '',
    //         address: '',
    //         bio: '',
    //         avatarMedia: undefined,
    //     },
    // }))



    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        //     setForm({ ...form, [e.target.name]: e.target.value });
    };

    // // const handleSubmit = (e: React.FormEvent) => {
    // //     e.preventDefault();
    // //     // Handle form submission logic here
    // //     alert('Signup successful!');
    // // };



    // }
    function onSubmit(values: z.infer<typeof UserModel>) {
        // Do something with the form values.
        // âœ… This will be type-safe and validated.
        alert("submit")
        console.log(values)
    }
    return (
        <main className="min-h-screen flex items-center justify-center "
            style={{
                backgroundImage: "url('/images/ant-rozetsky-HXOllTSwrpM-unsplash.jpg')",
                backgroundSize: 'cover',
                backgroundPosition: 'center',
            }}
        >
            <div className='w-full flex justify-center' style={{
                backgroundColor: "rgb(6, 8, 12,0.6)",
                backgroundPositionX: "50%",
                backgroundPositionY: "50%",
                WebkitTapHighlightColor: "transparent"
            }}>
                <div className="w-full mx-2 md:max-w-2/4 p-8 rounded-xl shadow-lg bg-white dark:bg-gray-800 my-4">
                    <Image className='m-auto rounded' src={'/images/logo.png'} alt='logo' width={150} height={150} />
                    <h3 className="text-3xl font-bold mb-6 text-center text-gray-800 dark:text-gray-100">
                        Create your account
                    </h3>

                    <FormProvider {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                            {/* Name */}
                            <FormField
                                control={form.control}
                                name="name"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Name</FormLabel>
                                        <FormControl>
                                            <Input placeholder="John Doe" {...field} />
                                        </FormControl>
                                        <FormDescription></FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Email */}
                            <FormField
                                control={form.control}
                                name="email"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Email</FormLabel>
                                        <FormControl>
                                            <Input autoComplete="email" type='email' placeholder="johndoe@email.com" {...field} />
                                        </FormControl>
                                        <FormDescription></FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Gender */}
                            <FormField
                                control={form.control}
                                name="gender"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Gender</FormLabel>
                                        <Select onValueChange={field.onChange} value={field.value}>
                                            <FormControl className='w-full'>
                                                <SelectTrigger className='w-full z-10'>
                                                    <SelectValue placeholder="Select gender" />
                                                </SelectTrigger>
                                            </FormControl>
                                            <SelectContent>
                                                <SelectItem value="Male">Male</SelectItem>
                                                <SelectItem value="Female">Female</SelectItem>
                                                <SelectItem value="Other">Other</SelectItem>
                                            </SelectContent>
                                        </Select>
                                        <FormDescription></FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Password */}
                            <FormField
                                control={form.control}
                                name="password"
                                render={({ field }) => (
                                    <><FormItem>
                                        <FormLabel>Password</FormLabel>
                                        <FormControl>
                                            <div className="relative">
                                                <Input
                                                    {...field}
                                                    type={showPassword ? "text" : "password"}
                                                    autoComplete="new-password" />
                                                <button
                                                    type="button"
                                                    tabIndex={-1}
                                                    className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500"
                                                    onClick={() => setShowPassword((prev) => !prev)}
                                                    aria-label={showPassword ? "Hide password" : "Show password"}
                                                >
                                                    {showPassword ? <IoEyeOff size={20} /> : <IoEye size={20} />}
                                                </button>
                                            </div>
                                        </FormControl><FormDescription></FormDescription><FormMessage />
                                    </FormItem></>
                                )}
                            />

                            {/* Confirm Password */}
                            <FormField
                                control={form.control}
                                name="confirmPassword"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Confirm Password</FormLabel>
                                        <FormControl>
                                            <div className="relative">
                                                <Input
                                                    {...field}
                                                    type={showPassword ? "text" : "password"}
                                                    autoComplete="confirmPassword" />
                                                <button
                                                    type="button"
                                                    tabIndex={-1}
                                                    className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500"
                                                    onClick={() => setShowPassword((prev) => !prev)}
                                                    aria-label={showPassword ? "Hide password" : "Show password"}
                                                >
                                                    {showPassword ? <IoEyeOff size={20} /> : <IoEye size={20} />}
                                                </button>
                                            </div>
                                        </FormControl>
                                        <FormDescription></FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Date of Birth */}
                            <FormField
                                control={form.control}
                                name="dob"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Date of Birth</FormLabel>

                                        <Popover>
                                            <PopoverTrigger asChild>
                                                <FormControl>
                                                    <Button
                                                        variant={"outline"}
                                                        className={cn(
                                                            "w-full pl-3 text-left font-normal",
                                                            !field.value && "text-muted-foreground"
                                                        )}
                                                    >
                                                        {field.value ? (
                                                            format(field.value, "PPP")
                                                        ) : (
                                                            <span>Pick a date</span>
                                                        )}
                                                        <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                                    </Button>
                                                </FormControl>
                                            </PopoverTrigger>
                                            <PopoverContent className="w-full p-0" align="start">
                                                <Calendar
                                                    mode="single"
                                                    selected={field.value}
                                                    onSelect={field.onChange}
                                                    disabled={(date) =>
                                                        date > new Date() || date < new Date("1900-01-01")
                                                    }
                                                    initialFocus
                                                />
                                            </PopoverContent>
                                        </Popover>

                                        <FormDescription></FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Phone Number */}
                            <FormField
                                control={form.control}
                                name="phoneNumber"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Phone Number</FormLabel>
                                        <FormControl>
                                            <Input {...field} autoComplete='phoneNumber' />
                                        </FormControl>
                                        <FormDescription></FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Address */}
                            <FormField
                                control={form.control}
                                name="address"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Address</FormLabel>
                                        <FormControl>
                                            <Input {...field} autoComplete='address' />
                                        </FormControl>
                                        <FormDescription></FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Bio */}
                            <FormField
                                control={form.control}
                                name="bio"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Bio</FormLabel>
                                        <FormControl>
                                            <Textarea {...field} placeholder="Type your message here." />
                                        </FormControl>
                                        <FormDescription></FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Avater */}
                            <FormField
                                control={form.control}
                                name="avatarMedia"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Avater <span className="text-xs text-gray-400">(optional, JPG/PNG, max 2MB)</span></FormLabel>
                                        <FormControl>
                                            <Input className="pl-0 py-0 h-auto self-center w-full rounded border border-gray-300 dark:border-gray-700 bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 file:mr-4 file:py-0 file:h-10 file:px-4 file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                                                type='file'
                                                autoComplete='off'
                                                onChange={e => {
                                                    const file = e.target.files?.[0];
                                                    field.onChange(file);
                                                }}
                                                // Do not spread {...field} to avoid passing value
                                                name={field.name}
                                                ref={field.ref}
                                                onBlur={field.onBlur}
                                            />
                                        </FormControl>
                                        <FormDescription>Upload a clear profile picture.</FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            {/* Avatar Preview */}
                            {form.watch('avatarMedia') && (
                                <div className="flex justify-center mt-2">
                                    <Image
                                        src={form.watch('avatarMedia') instanceof File ? URL.createObjectURL(form.watch('avatarMedia')) : ''}
                                        alt="Avatar Preview"
                                        className="w-16 h-16 rounded-full object-cover border-2 border-blue-400"
                                        width={64}
                                        height={64}
                                    />
                                </div>
                            )}

                            {/* Captcha (shadcn/ui style) */}
                            <FormField
                                control={form.control}
                                name="captchaInput"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>
                                            Captcha <span className="text-xs text-gray-400">(required)</span>
                                        </FormLabel>
                                        <div className="flex items-center space-x-2">
                                            <Input
                                                className="w-24 text-center font-mono font-bold"
                                                type="text"
                                                value={captcha}
                                                readOnly
                                                tabIndex={-1}
                                                aria-label="Captcha code"
                                            />
                                            <div className="relative w-full">
                                                <Input
                                                    {...field}
                                                    autoComplete="off"
                                                    placeholder="Enter captcha"
                                                    value={typeof field.value === 'string' || typeof field.value === 'number' || typeof field.value === 'undefined'
                                                        ? field.value ?? ''
                                                        : ''}
                                                />
                                                <Button
                                                    type="button"
                                                    size="sm"
                                                    variant="ghost"
                                                    className="absolute right-0 top-0 h-10"
                                                    onClick={e => {
                                                        generateCaptcha();
                                                        const icon = e.currentTarget.querySelector('svg');
                                                        if (icon) {
                                                            icon.classList.add('animate-spin-rotate');
                                                            setTimeout(() => icon.classList.remove('animate-spin-rotate'), 500);
                                                        }
                                                    }}
                                                    aria-label="Refresh captcha"
                                                >
                                                    <MdOutlineRefresh className="w-5 h-5" />
                                                </Button>
                                                <style jsx global>{`
                                                    .animate-spin-rotate {
                                                        animation: spin-rotate 0.5s linear;
                                                    }
                                                    @keyframes spin-rotate {
                                                        100% {
                                                            transform: rotate(360deg);
                                                        }
                                                    }
                                                `}</style>
                                            </div>
                                        </div>
                                        <FormDescription>Enter the code shown above.</FormDescription>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />

                            <Button type="submit">Submit</Button>
                            <Button onClick={() => { alert("l") }}>mit</Button>
                        </form>
                    </FormProvider>



                    <p className="mt-6 text-center text-gray-600 dark:text-gray-400 text-sm">
                        Already have an account?{' '}
                        <Link href={"/auth_gateway?signIn=true"} className="text-blue-600 hover:underline dark:text-blue-400">
                            Sign In
                        </Link>
                    </p>
                </div>
            </div>

        </main >
    );
}